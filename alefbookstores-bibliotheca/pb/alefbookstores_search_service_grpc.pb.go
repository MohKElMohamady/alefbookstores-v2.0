// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: alefbookstores_search_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlefBookstoresSearchServiceClient is the client API for AlefBookstoresSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlefBookstoresSearchServiceClient interface {
	SearchForBookByTitle(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookstoresSearchService_SearchForBookByTitleClient, error)
	SearchForBookByAuthorName(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookstoresSearchService_SearchForBookByAuthorNameClient, error)
	SearchForAuthorByName(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookstoresSearchService_SearchForAuthorByNameClient, error)
}

type alefBookstoresSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlefBookstoresSearchServiceClient(cc grpc.ClientConnInterface) AlefBookstoresSearchServiceClient {
	return &alefBookstoresSearchServiceClient{cc}
}

func (c *alefBookstoresSearchServiceClient) SearchForBookByTitle(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookstoresSearchService_SearchForBookByTitleClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlefBookstoresSearchService_ServiceDesc.Streams[0], "/AlefBookstoresSearchService/SearchForBookByTitle", opts...)
	if err != nil {
		return nil, err
	}
	x := &alefBookstoresSearchServiceSearchForBookByTitleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlefBookstoresSearchService_SearchForBookByTitleClient interface {
	Recv() (*AlefBookStoresBook, error)
	grpc.ClientStream
}

type alefBookstoresSearchServiceSearchForBookByTitleClient struct {
	grpc.ClientStream
}

func (x *alefBookstoresSearchServiceSearchForBookByTitleClient) Recv() (*AlefBookStoresBook, error) {
	m := new(AlefBookStoresBook)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *alefBookstoresSearchServiceClient) SearchForBookByAuthorName(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookstoresSearchService_SearchForBookByAuthorNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlefBookstoresSearchService_ServiceDesc.Streams[1], "/AlefBookstoresSearchService/SearchForBookByAuthorName", opts...)
	if err != nil {
		return nil, err
	}
	x := &alefBookstoresSearchServiceSearchForBookByAuthorNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlefBookstoresSearchService_SearchForBookByAuthorNameClient interface {
	Recv() (*AlefBookStoresBook, error)
	grpc.ClientStream
}

type alefBookstoresSearchServiceSearchForBookByAuthorNameClient struct {
	grpc.ClientStream
}

func (x *alefBookstoresSearchServiceSearchForBookByAuthorNameClient) Recv() (*AlefBookStoresBook, error) {
	m := new(AlefBookStoresBook)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *alefBookstoresSearchServiceClient) SearchForAuthorByName(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookstoresSearchService_SearchForAuthorByNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlefBookstoresSearchService_ServiceDesc.Streams[2], "/AlefBookstoresSearchService/SearchForAuthorByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &alefBookstoresSearchServiceSearchForAuthorByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlefBookstoresSearchService_SearchForAuthorByNameClient interface {
	Recv() (*Author, error)
	grpc.ClientStream
}

type alefBookstoresSearchServiceSearchForAuthorByNameClient struct {
	grpc.ClientStream
}

func (x *alefBookstoresSearchServiceSearchForAuthorByNameClient) Recv() (*Author, error) {
	m := new(Author)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlefBookstoresSearchServiceServer is the server API for AlefBookstoresSearchService service.
// All implementations must embed UnimplementedAlefBookstoresSearchServiceServer
// for forward compatibility
type AlefBookstoresSearchServiceServer interface {
	SearchForBookByTitle(*wrapperspb.StringValue, AlefBookstoresSearchService_SearchForBookByTitleServer) error
	SearchForBookByAuthorName(*wrapperspb.StringValue, AlefBookstoresSearchService_SearchForBookByAuthorNameServer) error
	SearchForAuthorByName(*wrapperspb.StringValue, AlefBookstoresSearchService_SearchForAuthorByNameServer) error
	mustEmbedUnimplementedAlefBookstoresSearchServiceServer()
}

// UnimplementedAlefBookstoresSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlefBookstoresSearchServiceServer struct {
}

func (UnimplementedAlefBookstoresSearchServiceServer) SearchForBookByTitle(*wrapperspb.StringValue, AlefBookstoresSearchService_SearchForBookByTitleServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchForBookByTitle not implemented")
}
func (UnimplementedAlefBookstoresSearchServiceServer) SearchForBookByAuthorName(*wrapperspb.StringValue, AlefBookstoresSearchService_SearchForBookByAuthorNameServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchForBookByAuthorName not implemented")
}
func (UnimplementedAlefBookstoresSearchServiceServer) SearchForAuthorByName(*wrapperspb.StringValue, AlefBookstoresSearchService_SearchForAuthorByNameServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchForAuthorByName not implemented")
}
func (UnimplementedAlefBookstoresSearchServiceServer) mustEmbedUnimplementedAlefBookstoresSearchServiceServer() {
}

// UnsafeAlefBookstoresSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlefBookstoresSearchServiceServer will
// result in compilation errors.
type UnsafeAlefBookstoresSearchServiceServer interface {
	mustEmbedUnimplementedAlefBookstoresSearchServiceServer()
}

func RegisterAlefBookstoresSearchServiceServer(s grpc.ServiceRegistrar, srv AlefBookstoresSearchServiceServer) {
	s.RegisterService(&AlefBookstoresSearchService_ServiceDesc, srv)
}

func _AlefBookstoresSearchService_SearchForBookByTitle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlefBookstoresSearchServiceServer).SearchForBookByTitle(m, &alefBookstoresSearchServiceSearchForBookByTitleServer{stream})
}

type AlefBookstoresSearchService_SearchForBookByTitleServer interface {
	Send(*AlefBookStoresBook) error
	grpc.ServerStream
}

type alefBookstoresSearchServiceSearchForBookByTitleServer struct {
	grpc.ServerStream
}

func (x *alefBookstoresSearchServiceSearchForBookByTitleServer) Send(m *AlefBookStoresBook) error {
	return x.ServerStream.SendMsg(m)
}

func _AlefBookstoresSearchService_SearchForBookByAuthorName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlefBookstoresSearchServiceServer).SearchForBookByAuthorName(m, &alefBookstoresSearchServiceSearchForBookByAuthorNameServer{stream})
}

type AlefBookstoresSearchService_SearchForBookByAuthorNameServer interface {
	Send(*AlefBookStoresBook) error
	grpc.ServerStream
}

type alefBookstoresSearchServiceSearchForBookByAuthorNameServer struct {
	grpc.ServerStream
}

func (x *alefBookstoresSearchServiceSearchForBookByAuthorNameServer) Send(m *AlefBookStoresBook) error {
	return x.ServerStream.SendMsg(m)
}

func _AlefBookstoresSearchService_SearchForAuthorByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlefBookstoresSearchServiceServer).SearchForAuthorByName(m, &alefBookstoresSearchServiceSearchForAuthorByNameServer{stream})
}

type AlefBookstoresSearchService_SearchForAuthorByNameServer interface {
	Send(*Author) error
	grpc.ServerStream
}

type alefBookstoresSearchServiceSearchForAuthorByNameServer struct {
	grpc.ServerStream
}

func (x *alefBookstoresSearchServiceSearchForAuthorByNameServer) Send(m *Author) error {
	return x.ServerStream.SendMsg(m)
}

// AlefBookstoresSearchService_ServiceDesc is the grpc.ServiceDesc for AlefBookstoresSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlefBookstoresSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AlefBookstoresSearchService",
	HandlerType: (*AlefBookstoresSearchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchForBookByTitle",
			Handler:       _AlefBookstoresSearchService_SearchForBookByTitle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchForBookByAuthorName",
			Handler:       _AlefBookstoresSearchService_SearchForBookByAuthorName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchForAuthorByName",
			Handler:       _AlefBookstoresSearchService_SearchForAuthorByName_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alefbookstores_search_service.proto",
}
