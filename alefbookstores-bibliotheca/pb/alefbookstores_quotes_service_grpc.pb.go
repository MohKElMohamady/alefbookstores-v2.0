// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: alefbookstores_quotes_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlefBookStoresQuotesServiceClient is the client API for AlefBookStoresQuotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlefBookStoresQuotesServiceClient interface {
	AddQuoteByAuthor(ctx context.Context, in *QuoteAddRequest, opts ...grpc.CallOption) (*Quote, error)
	AddQuoteByBook(ctx context.Context, in *QuoteAddRequest, opts ...grpc.CallOption) (*Quote, error)
	UpdateQuote(ctx context.Context, in *Quote, opts ...grpc.CallOption) (*Quote, error)
	DeleteQuote(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Quote, error)
	GetQuotesByAuthor(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookStoresQuotesService_GetQuotesByAuthorClient, error)
	GetQuotesByBook(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookStoresQuotesService_GetQuotesByBookClient, error)
	GetQuotesByUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookStoresQuotesService_GetQuotesByUserClient, error)
}

type alefBookStoresQuotesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlefBookStoresQuotesServiceClient(cc grpc.ClientConnInterface) AlefBookStoresQuotesServiceClient {
	return &alefBookStoresQuotesServiceClient{cc}
}

func (c *alefBookStoresQuotesServiceClient) AddQuoteByAuthor(ctx context.Context, in *QuoteAddRequest, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/alefbookstores.quotes.AlefBookStoresQuotesService/AddQuoteByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alefBookStoresQuotesServiceClient) AddQuoteByBook(ctx context.Context, in *QuoteAddRequest, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/alefbookstores.quotes.AlefBookStoresQuotesService/AddQuoteByBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alefBookStoresQuotesServiceClient) UpdateQuote(ctx context.Context, in *Quote, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/alefbookstores.quotes.AlefBookStoresQuotesService/UpdateQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alefBookStoresQuotesServiceClient) DeleteQuote(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/alefbookstores.quotes.AlefBookStoresQuotesService/DeleteQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alefBookStoresQuotesServiceClient) GetQuotesByAuthor(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookStoresQuotesService_GetQuotesByAuthorClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlefBookStoresQuotesService_ServiceDesc.Streams[0], "/alefbookstores.quotes.AlefBookStoresQuotesService/GetQuotesByAuthor", opts...)
	if err != nil {
		return nil, err
	}
	x := &alefBookStoresQuotesServiceGetQuotesByAuthorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlefBookStoresQuotesService_GetQuotesByAuthorClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type alefBookStoresQuotesServiceGetQuotesByAuthorClient struct {
	grpc.ClientStream
}

func (x *alefBookStoresQuotesServiceGetQuotesByAuthorClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *alefBookStoresQuotesServiceClient) GetQuotesByBook(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookStoresQuotesService_GetQuotesByBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlefBookStoresQuotesService_ServiceDesc.Streams[1], "/alefbookstores.quotes.AlefBookStoresQuotesService/GetQuotesByBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &alefBookStoresQuotesServiceGetQuotesByBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlefBookStoresQuotesService_GetQuotesByBookClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type alefBookStoresQuotesServiceGetQuotesByBookClient struct {
	grpc.ClientStream
}

func (x *alefBookStoresQuotesServiceGetQuotesByBookClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *alefBookStoresQuotesServiceClient) GetQuotesByUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (AlefBookStoresQuotesService_GetQuotesByUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlefBookStoresQuotesService_ServiceDesc.Streams[2], "/alefbookstores.quotes.AlefBookStoresQuotesService/GetQuotesByUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &alefBookStoresQuotesServiceGetQuotesByUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlefBookStoresQuotesService_GetQuotesByUserClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type alefBookStoresQuotesServiceGetQuotesByUserClient struct {
	grpc.ClientStream
}

func (x *alefBookStoresQuotesServiceGetQuotesByUserClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlefBookStoresQuotesServiceServer is the server API for AlefBookStoresQuotesService service.
// All implementations must embed UnimplementedAlefBookStoresQuotesServiceServer
// for forward compatibility
type AlefBookStoresQuotesServiceServer interface {
	AddQuoteByAuthor(context.Context, *QuoteAddRequest) (*Quote, error)
	AddQuoteByBook(context.Context, *QuoteAddRequest) (*Quote, error)
	UpdateQuote(context.Context, *Quote) (*Quote, error)
	DeleteQuote(context.Context, *wrapperspb.StringValue) (*Quote, error)
	GetQuotesByAuthor(*wrapperspb.StringValue, AlefBookStoresQuotesService_GetQuotesByAuthorServer) error
	GetQuotesByBook(*wrapperspb.StringValue, AlefBookStoresQuotesService_GetQuotesByBookServer) error
	GetQuotesByUser(*wrapperspb.StringValue, AlefBookStoresQuotesService_GetQuotesByUserServer) error
	mustEmbedUnimplementedAlefBookStoresQuotesServiceServer()
}

// UnimplementedAlefBookStoresQuotesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlefBookStoresQuotesServiceServer struct {
}

func (UnimplementedAlefBookStoresQuotesServiceServer) AddQuoteByAuthor(context.Context, *QuoteAddRequest) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuoteByAuthor not implemented")
}
func (UnimplementedAlefBookStoresQuotesServiceServer) AddQuoteByBook(context.Context, *QuoteAddRequest) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuoteByBook not implemented")
}
func (UnimplementedAlefBookStoresQuotesServiceServer) UpdateQuote(context.Context, *Quote) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuote not implemented")
}
func (UnimplementedAlefBookStoresQuotesServiceServer) DeleteQuote(context.Context, *wrapperspb.StringValue) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuote not implemented")
}
func (UnimplementedAlefBookStoresQuotesServiceServer) GetQuotesByAuthor(*wrapperspb.StringValue, AlefBookStoresQuotesService_GetQuotesByAuthorServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotesByAuthor not implemented")
}
func (UnimplementedAlefBookStoresQuotesServiceServer) GetQuotesByBook(*wrapperspb.StringValue, AlefBookStoresQuotesService_GetQuotesByBookServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotesByBook not implemented")
}
func (UnimplementedAlefBookStoresQuotesServiceServer) GetQuotesByUser(*wrapperspb.StringValue, AlefBookStoresQuotesService_GetQuotesByUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotesByUser not implemented")
}
func (UnimplementedAlefBookStoresQuotesServiceServer) mustEmbedUnimplementedAlefBookStoresQuotesServiceServer() {
}

// UnsafeAlefBookStoresQuotesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlefBookStoresQuotesServiceServer will
// result in compilation errors.
type UnsafeAlefBookStoresQuotesServiceServer interface {
	mustEmbedUnimplementedAlefBookStoresQuotesServiceServer()
}

func RegisterAlefBookStoresQuotesServiceServer(s grpc.ServiceRegistrar, srv AlefBookStoresQuotesServiceServer) {
	s.RegisterService(&AlefBookStoresQuotesService_ServiceDesc, srv)
}

func _AlefBookStoresQuotesService_AddQuoteByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlefBookStoresQuotesServiceServer).AddQuoteByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alefbookstores.quotes.AlefBookStoresQuotesService/AddQuoteByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlefBookStoresQuotesServiceServer).AddQuoteByAuthor(ctx, req.(*QuoteAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlefBookStoresQuotesService_AddQuoteByBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlefBookStoresQuotesServiceServer).AddQuoteByBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alefbookstores.quotes.AlefBookStoresQuotesService/AddQuoteByBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlefBookStoresQuotesServiceServer).AddQuoteByBook(ctx, req.(*QuoteAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlefBookStoresQuotesService_UpdateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Quote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlefBookStoresQuotesServiceServer).UpdateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alefbookstores.quotes.AlefBookStoresQuotesService/UpdateQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlefBookStoresQuotesServiceServer).UpdateQuote(ctx, req.(*Quote))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlefBookStoresQuotesService_DeleteQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlefBookStoresQuotesServiceServer).DeleteQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alefbookstores.quotes.AlefBookStoresQuotesService/DeleteQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlefBookStoresQuotesServiceServer).DeleteQuote(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlefBookStoresQuotesService_GetQuotesByAuthor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlefBookStoresQuotesServiceServer).GetQuotesByAuthor(m, &alefBookStoresQuotesServiceGetQuotesByAuthorServer{stream})
}

type AlefBookStoresQuotesService_GetQuotesByAuthorServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type alefBookStoresQuotesServiceGetQuotesByAuthorServer struct {
	grpc.ServerStream
}

func (x *alefBookStoresQuotesServiceGetQuotesByAuthorServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

func _AlefBookStoresQuotesService_GetQuotesByBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlefBookStoresQuotesServiceServer).GetQuotesByBook(m, &alefBookStoresQuotesServiceGetQuotesByBookServer{stream})
}

type AlefBookStoresQuotesService_GetQuotesByBookServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type alefBookStoresQuotesServiceGetQuotesByBookServer struct {
	grpc.ServerStream
}

func (x *alefBookStoresQuotesServiceGetQuotesByBookServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

func _AlefBookStoresQuotesService_GetQuotesByUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlefBookStoresQuotesServiceServer).GetQuotesByUser(m, &alefBookStoresQuotesServiceGetQuotesByUserServer{stream})
}

type AlefBookStoresQuotesService_GetQuotesByUserServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type alefBookStoresQuotesServiceGetQuotesByUserServer struct {
	grpc.ServerStream
}

func (x *alefBookStoresQuotesServiceGetQuotesByUserServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

// AlefBookStoresQuotesService_ServiceDesc is the grpc.ServiceDesc for AlefBookStoresQuotesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlefBookStoresQuotesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alefbookstores.quotes.AlefBookStoresQuotesService",
	HandlerType: (*AlefBookStoresQuotesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddQuoteByAuthor",
			Handler:    _AlefBookStoresQuotesService_AddQuoteByAuthor_Handler,
		},
		{
			MethodName: "AddQuoteByBook",
			Handler:    _AlefBookStoresQuotesService_AddQuoteByBook_Handler,
		},
		{
			MethodName: "UpdateQuote",
			Handler:    _AlefBookStoresQuotesService_UpdateQuote_Handler,
		},
		{
			MethodName: "DeleteQuote",
			Handler:    _AlefBookStoresQuotesService_DeleteQuote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQuotesByAuthor",
			Handler:       _AlefBookStoresQuotesService_GetQuotesByAuthor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetQuotesByBook",
			Handler:       _AlefBookStoresQuotesService_GetQuotesByBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetQuotesByUser",
			Handler:       _AlefBookStoresQuotesService_GetQuotesByUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alefbookstores_quotes_service.proto",
}
